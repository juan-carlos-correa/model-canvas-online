{"version":3,"sources":["components/Row.js","components/Column.js","components/Title.js","components/Postit.js","components/Section.js","components/Board.js","Root.js","serviceWorker.js","index.js"],"names":["Row","_ref","children","react_default","a","createElement","className","Column","_ref$extraClass","extraClass","concat","Title","_ref$className","Postit","text","index","handleRemove","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onClick","onChange","_ref2","target","Section","name","postits","setPostit","indexToRemove","postitsUpdated","filter","components_Title","map","components_Postit","key","toConsumableArray","Board","components_Row","components_Column","components_Section","Root","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3930e79.chunk.js","sourcesContent":["import React from 'react'\n\nconst Row = ({ children }) => (\n  <div className=\"row\">\n    {children}\n  </div>\n)\n\nexport default Row\n","import React from 'react'\n\nconst Column = ({ children, extraClass = '' }) => (\n  <div className={`column ${extraClass}`}>\n    {children}\n  </div>\n)\n\nexport default Column\n","import React from 'react'\n\nconst Title = ({ children, className = '' }) => (\n  <h1 className={`title ${className}`}>{children}</h1>\n)\n\nexport default Title\n","import React, { useState } from 'react'\n\nconst Postit = ({ text, index, handleRemove }) => {\n  const [value, setValue] = useState(text)\n  return (\n    <div className=\"postit\">\n      <span className=\"remove-postit\" onClick={() => handleRemove(index)}>&times;</span>\n      <textarea value={value} onChange={({ target }) => setValue(target.value)} />\n    </div>\n  )\n}\n\nexport default Postit\n","import React, { useState } from 'react'\nimport Title from './Title'\nimport Postit from './Postit'\n\nconst Section = ({ name }) => {\n  const [postits, setPostit] = useState([{ text: 'My Post-it example' }])\n\n  const handleAddPostit = () => {\n    setPostit([\n      ...postits,\n      { text: '' }\n    ])\n  }\n\n  const handleRemove = (indexToRemove) => {\n    const postitsUpdated = postits.filter((text, index) => index !== indexToRemove)\n    setPostit(postitsUpdated)\n  }\n\n  return (\n    <section>\n      <Title>{name}</Title>\n\n      {\n        postits.map(({ text }, index) => (\n          <Postit\n            key={index}\n            index={index}\n            text={text}\n            handleRemove={handleRemove}\n          />\n        ))\n      }\n\n      <button onClick={handleAddPostit}>Add</button>\n    </section>\n  )\n}\n\nexport default Section\n","import React from 'react'\nimport Row from './Row'\nimport Column from './Column'\nimport Section from './Section'\n\nconst Board = () => {\n  return (\n    <div className=\"board-container\">\n      <Row className=\"row\">\n        <Column extraClass=\"single-column\">\n          <Section name=\"Key Partners\" />\n        </Column>\n\n        <Column extraClass=\"double-column\">\n          <Section name=\"Key Activities\" />\n          <Section name=\"Key Resources\" />\n        </Column>\n\n        <Column extraClass=\"single-column\">\n          <Section name=\"Value Proposition\" />\n        </Column>\n\n        <Column extraClass=\"double-column\">\n          <Section name=\"Relationships\" />\n          <Section name=\"Channels\" />\n        </Column>\n\n        <Column extraClass=\"single-column\">\n          <Section name=\"Customer Segment\" />\n        </Column>\n      </Row>\n\n      <Row className=\"row\">\n        <Column extraClass=\"footer-column\">\n          <Section name=\"Cost Structure\" />\n        </Column>\n\n        <Column extraClass=\"footer-column\">\n          <Section name=\"Revenue Streams\" />\n        </Column>\n      </Row>\n    </div>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport Board from './components/Board'\nimport Title from './components/Title'\n\nconst Root = () => (\n  <div className=\"app-container\">\n    <Title className=\"main-title\">Model canvas</Title>\n    <Board />\n  </div>\n)\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}